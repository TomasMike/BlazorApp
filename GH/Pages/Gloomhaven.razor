@page "/gloomhaven"
@inject IJSRuntime JS;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApp.GH
@using BlazorApp.GH.Management
@using BlazorApp.GH.Components
@using BlazorApp.GH.Utilities
@using BlazorApp.Models

@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@*<div style="position:relative">

    @{
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                <Hex LeftCoord="j" TopCoord="i" Board="this"></Hex>
            }
        }
    }
    </div>*@
<div class="gameBoard">
    <table>
        <tr>
            <td style="width:80%;height:80%">
                <div style="position: relative; margin-top: 30px; position: relative; height:100%;">
                    @{
                        for (int i = 0; i < 4; i++)
                        {
                            for (int j = 0; j < 4; j++)
                            {
                                <Hex Column="j" Row="i" Board="this"></Hex>
                            }
                        }
                    }
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>  <input @bind="Size" />   <button class="btn btn-primary" @onclick="ChangeSize">change size</button></td>
                    </tr>
                    <tr>
                        <td>  <input @bind="levelPickValueRef" type="text" />   <button class="btn btn-primary" @onclick="Start">start</button></td>
                    </tr>
                </table>



                <button class="btn btn-primary" @onclick="ToggleMoveState">
                    @MoveButtonText
                </button>
                <ul id="messagesList">
                    @foreach (var message in messages)
                    {
                        <li>@message</li>
                    }
                </ul>
            </td>
        </tr>
    </table>
</div>





@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    public List<Hex> Hexes = new List<Hex>();

    private string Size = GlobalSettings.Size.ToString();
    private string levelPickValueRef = "1";

    private string MoveButtonText => GHGameManager.GameState.GBState == GameBoardState.Move ? "Cancel Move" : "Move";


    private void StartGame()
    {
        //var x = JS.InvokeAsync<bool>("confirm", "si si isty?");
    }


    protected override async Task OnInitializedAsync()
    {
        #region SIGNALR

        GHGameManager.GameState = new GameState(this);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gloomhavenHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });


        hubConnection.On<string, int, int>("SpawnCharacter", (json, row, col) =>
        {
            var h = this.GetHexByCoords(col, row);
            var obj = JsonConvert.DeserializeObject<CharacterComponent>(json);
            if (h != null)
                h.Components.Add(obj);
            else
                throw new Exception($"hex on row[{row}],col:[{col}] doesnt exist");
            messages.Add($"spawned character {obj} on hex [{row},{col}]");

            StateHasChanged();
        });

        hubConnection.On<int, int, int>("ChangeColor", (hexCol, hexRow, color) =>
        {
            var h = this.GetHexByCoords(hexCol, hexRow);
            h.ChangeColor((HexColor)color);
            StateHasChanged();
        });

        hubConnection.On<string, int, int>("SpawnTerrainComponent", (json, row, col) =>
        {
            var h = this.GetHexByCoords(row, col);
            var obj = JsonConvert.DeserializeObject<TerrainComponent>(json);
            if (h != null)
                h.Components.Add(obj);
            else
                throw new Exception($"hex on row[{row}],col:[{col}] doesnt exist");

            messages.Add($"spawned terrain tile {obj} on hex [{row},{col}]");

            StateHasChanged();
        });








        await hubConnection.StartAsync();





        while (hubConnection.State != HubConnectionState.Connected)
        {
            await Task.Delay(100);
            Console.WriteLine($"hubConnection is {hubConnection.State}");
        }

        Console.WriteLine($"Board connected.");
        #endregion
    }

    public async Task Send() =>
 await hubConnection.SendAsync("SendMessage", "", "");

    public async Task Click(string hexId)
    {
        switch (GHGameManager.GameState.GBState)
        {
            case GameBoardState.Move:

                break;
            case GameBoardState.Default:
            default:
                break;
        }

        Console.WriteLine($"clicky");

        await hubConnection.SendAsync("HexClicked", hexId);
    }

    public async Task Start()
    {
        await hubConnection.SendAsync("StartClicked", int.Parse(levelPickValueRef));
        //Hexes.FirstOrDefault()?.Components.Add(new Character() { CharacterType = CharacterType.Mindthief });
        //StateHasChanged();
        //await hubConnection.SendAsync("StartClicked");
    }

    public async Task ChangeSize()
    {
        GlobalSettings.Size = int.Parse(Size);
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }

    public async Task ToggleMoveState()
    {
        GHGameManager.GameState.GBState = GHGameManager.GameState.GBState == GameBoardState.Move ? GameBoardState.Default : GameBoardState.Move;

        if (GHGameManager.GameState.GBState == GameBoardState.Move)
        {
            Helper.GetHexByPlayer(GHGameManager.GameState.ActivePlayer).ChangeColor(GlobalSettings.OriginHexColor);

            var validOptionHexes = Helper.GetPossibleMoveHexes(GHGameManager.GameState.ActivePlayer, 1);
            foreach (var h in validOptionHexes)
            {
                h.HexClicked += ClickToMove;
                h.ChangeColor(GlobalSettings.ClickableOptionHexColor);
            }
        }
        else
        {
            foreach (var h in Hexes)
            {
                h.HexClicked -= ClickToMove;
                h.ChangeColor(GlobalSettings.DefaultHexColor);
            }
        }
    }

    public void ClickToMove(object o, Hex h)
    {
        GHGameManager.Move(Helper.GetCharacterComponent(GHGameManager.GameState.ActivePlayer),h);
        ToggleMoveState();
        StateHasChanged();
        Console.WriteLine($"snaha o pohyb,[{o}],[{h}]");
    }

    private string GetHexGridSize()
    {
        return "";
        //Hexes.Distinct(h => )
    }

    private void UpdateGameState()
    {

    }

    private void RefreshObjectState()
    {
        StateHasChanged();
    }

}
