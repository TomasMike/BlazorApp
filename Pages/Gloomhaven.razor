@page "/gloomhaven"
@inject IJSRuntime JS;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApp.GH
@using BlazorApp.Models

@implements IAsyncDisposable
@inject NavigationManager NavigationManager


<div>
    <div class="hexGrid">
        @{
            for (int j = 0; j < 4; j++)
            {
                for (int i = 0; i <= 4; i++)
                {
                    <Hex LeftCoord="i" TopCoord="j" Board="@this"></Hex>
                }
            }

        }

    </div>
    <div id="sidePanel">
        @*<button class="btn btn-primary" @onclick="StartGame">Start</button>*@
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>
</div>
@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private Hex[][] Hexes;


    private void StartGame()
    {
        //var x = JS.InvokeAsync<bool>("confirm", "si si isty?");
    }

    protected override async Task OnInitializedAsync()
    {

        //var b = new HubConnectionBuilder();
        //var x = 0.1+0.1+0.1;
        //try
        //{
        //    hubConnection = b.WithUrl(NavigationManager.ToAbsoluteUri("/gloomhavenHub")).Build();
        //}
        //catch (Exception)
        //{
        //    var q = 2;
        //    //throw;
        //}


        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/gloomhavenHub"))
                .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });


        hubConnection.On<IGameComponent, int, int>("SpawnGameComponent", (obj, row, col) =>
        {

            StateHasChanged();
        });

        await hubConnection.StartAsync();

        Console.WriteLine($"Board connected.");

    }

    public async Task Send() =>
     await hubConnection.SendAsync("SendMessage", "", "");

    public async Task Click(string hexId) =>
        await hubConnection.SendAsync("HexClicked", hexId);

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }



}
