@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@using BlazorApp.GH
@using BlazorApp.GH.Pages
@inject NavigationManager NavigationManager


<div id="@GetId()" class="hexagon" style="top:@Top;left:@Left;">
   <p> @GetText() </p>
    <div style="height:@HexInnerComponentHeight;width:@HexInnerComponentWidth;background:@InnerHexComponentColor" class="h1" @onclick="Click"></div>
    <div style="height:@HexInnerComponentHeight;width:@HexInnerComponentWidth;background:@InnerHexComponentColor" class="h2" @onclick="Click"></div>
    <div style="height:@HexInnerComponentHeight;width:@HexInnerComponentWidth;background:@InnerHexComponentColor" class="h3" @onclick="Click"></div>
    @* <button style="position:absolute;align-content:center" @onclick="Send">HexBtn</button>*@
</div>
@code{

    public Hex() { }

    public Hex(int left, int top)
    {
        LeftCoord = left;
        TopCoord = top;

        StateHasChanged();
    }

    private Gloomhaven _board;
    [Parameter]
    public Gloomhaven Board
    {
        get
        {
            return _board;
        }
        set
        {
            _board = value;
            if(!_board.Hexes.Contains(this))
                _board.Hexes.Add(this);
        }
    }

    [Parameter]
    public int TopCoord { get; set; }
    [Parameter]
    public int LeftCoord { get; set; }


    public string HexInnerComponentHeight { get; set; }
    public string HexInnerComponentWidth { get; set; }

    public List<IGameComponent> Components = new List<IGameComponent>();

    private HubConnection hubConnection;
    private string Top => (LeftCoord % 2 == 0 ? TopCoord * hexSizeConfig.Height : TopCoord * hexSizeConfig.Height + (hexSizeConfig.Height / 2)).ToString() + "px";
    private string Left => (LeftCoord * hexSizeConfig.Width).ToString() + "px";
    private MarkupString Text;
    private HexSizeConfig hexSizeConfig;
    private string HexHeight;
    private string HexWidth;
    private string InnerHexComponentColor = "red";

    private string TopInner = "0px";
    private string LeftInner = "0px";

    public void ChangeColor()
    {
        if (InnerHexComponentColor == "red")
            InnerHexComponentColor = "green";
        else if (InnerHexComponentColor == "green")
            InnerHexComponentColor = "blue";
        else
            InnerHexComponentColor = "red";
        StateHasChanged();
    }

    #region SIGNALR 
    #endregion

    protected override void OnInitialized()
    {
        var s = 3;

        hexSizeConfig = GlobalSettings.HexSizeConfigurations[s];
        HexInnerComponentHeight = hexSizeConfig.InnerPartHeight + "px";
        HexInnerComponentWidth = hexSizeConfig.InnerPartWidth + "px";
        HexWidth = hexSizeConfig.Width + "px";
        HexHeight = hexSizeConfig.Height + "px";
    }

    private string GetId()
    {
        return TopCoord + "_" + LeftCoord;
    }

    private string GetText()
    {

        StringBuilder sb = new StringBuilder();
        foreach (var component in Components)
        {
            sb.AppendLine($"{component.DisplayText()}");
        }


        return sb.ToString();

    }

    protected override async Task OnInitializedAsync()
    {


    }

    public string Test(string s)
    {
        return "dal si" + s;
    }

    private void Click()
    {
        ChangeColor();
        //Board.Click(GetId());
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}